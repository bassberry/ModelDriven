/**
 */
package screenModel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import screenModel.util.ScreenModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScreenModelItemProviderAdapterFactory extends ScreenModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ScreenModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.ScreenModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScreenModelItemProvider screenModelItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.ScreenModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScreenModelAdapter() {
		if (screenModelItemProvider == null) {
			screenModelItemProvider = new ScreenModelItemProvider(this);
		}

		return screenModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Seite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SeiteItemProvider seiteItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Seite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSeiteAdapter() {
		if (seiteItemProvider == null) {
			seiteItemProvider = new SeiteItemProvider(this);
		}

		return seiteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Dateneingabe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateneingabeItemProvider dateneingabeItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Dateneingabe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateneingabeAdapter() {
		if (dateneingabeItemProvider == null) {
			dateneingabeItemProvider = new DateneingabeItemProvider(this);
		}

		return dateneingabeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Datenausgabe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatenausgabeItemProvider datenausgabeItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Datenausgabe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatenausgabeAdapter() {
		if (datenausgabeItemProvider == null) {
			datenausgabeItemProvider = new DatenausgabeItemProvider(this);
		}

		return datenausgabeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Datenobjekt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatenobjektItemProvider datenobjektItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Datenobjekt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatenobjektAdapter() {
		if (datenobjektItemProvider == null) {
			datenobjektItemProvider = new DatenobjektItemProvider(this);
		}

		return datenobjektItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Datenstruktur} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatenstrukturItemProvider datenstrukturItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Datenstruktur}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatenstrukturAdapter() {
		if (datenstrukturItemProvider == null) {
			datenstrukturItemProvider = new DatenstrukturItemProvider(this);
		}

		return datenstrukturItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Attribut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributItemProvider attributItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Attribut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributAdapter() {
		if (attributItemProvider == null) {
			attributItemProvider = new AttributItemProvider(this);
		}

		return attributItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Datenausgabefeld} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatenausgabefeldItemProvider datenausgabefeldItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Datenausgabefeld}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatenausgabefeldAdapter() {
		if (datenausgabefeldItemProvider == null) {
			datenausgabefeldItemProvider = new DatenausgabefeldItemProvider(this);
		}

		return datenausgabefeldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Textfeld} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextfeldItemProvider textfeldItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Textfeld}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextfeldAdapter() {
		if (textfeldItemProvider == null) {
			textfeldItemProvider = new TextfeldItemProvider(this);
		}

		return textfeldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Eingabefeld} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EingabefeldItemProvider eingabefeldItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Eingabefeld}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEingabefeldAdapter() {
		if (eingabefeldItemProvider == null) {
			eingabefeldItemProvider = new EingabefeldItemProvider(this);
		}

		return eingabefeldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Dateneingabefeld} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateneingabefeldItemProvider dateneingabefeldItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Dateneingabefeld}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateneingabefeldAdapter() {
		if (dateneingabefeldItemProvider == null) {
			dateneingabefeldItemProvider = new DateneingabefeldItemProvider(this);
		}

		return dateneingabefeldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link screenModel.Ausgabefeld} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AusgabefeldItemProvider ausgabefeldItemProvider;

	/**
	 * This creates an adapter for a {@link screenModel.Ausgabefeld}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAusgabefeldAdapter() {
		if (ausgabefeldItemProvider == null) {
			ausgabefeldItemProvider = new AusgabefeldItemProvider(this);
		}

		return ausgabefeldItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (screenModelItemProvider != null) screenModelItemProvider.dispose();
		if (seiteItemProvider != null) seiteItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (dateneingabeItemProvider != null) dateneingabeItemProvider.dispose();
		if (datenausgabeItemProvider != null) datenausgabeItemProvider.dispose();
		if (datenobjektItemProvider != null) datenobjektItemProvider.dispose();
		if (datenstrukturItemProvider != null) datenstrukturItemProvider.dispose();
		if (attributItemProvider != null) attributItemProvider.dispose();
		if (datenausgabefeldItemProvider != null) datenausgabefeldItemProvider.dispose();
		if (textfeldItemProvider != null) textfeldItemProvider.dispose();
		if (eingabefeldItemProvider != null) eingabefeldItemProvider.dispose();
		if (dateneingabefeldItemProvider != null) dateneingabefeldItemProvider.dispose();
		if (ausgabefeldItemProvider != null) ausgabefeldItemProvider.dispose();
	}

}
